gcc
-E	只处理源文件 里的所有预处理工作；
-c      这个选项只完成预处理指令的编译工作
         这个选项会得到以.o作为扩展名的目标文件
-o       这个选项后可以写一个名字，将作为输出文件名
-std=c89/-std=c99
         这个选项可以决定采用什么版本进行编译
         如果没有使用这个选项则默认采用c89版本



C基本知识
	C语言程序扩展名为  ×.c
	每句用；结束；
	{}可以代表函数；
	每个函数名不能相同；
	必须有主函数main;;
	返回0表示正常；
关键字：
auto ：声明自动变量 一般不使用 
double ：声明双精度变量或函数 
int： 声明整型变量或函数 
struct：声明结构体变量或函数 
break：跳出当前循环 
else ：条件语句否定分支（与 if 连用） 
long ：声明长整型变量或函数 
switch :用于开关语句 
case：开关语句分支 
enum ：声明枚举类型 
register：声明积存器变量 
typedef：用以给数据类型取别名（当然还有其他作用） 
char ：声明字符型变量或函数 
extern：声明变量是在其他文件正声明（也可以看做是引用变量） 
return ：子程序返回语句（可以带参数，也看不带参数） 
union：声明联合数据类型 
const ：声明只读变量 
float：声明浮点型变量或函数 
short ：声明短整型变量或函数 
unsigned：声明无符号类型变量或函数 
continue：结束当前循环，开始下一轮循环 
for：一种循环语句(可意会不可言传） 
signed：生命有符号类型变量或函数 
void ：声明函数无返回值或无参数，声明无类型指针（基本上就这三个作用） 
default：开关语句中的“其他”分支 
goto：无条件跳转语句 
sizeof：计算数据类型长度 
volatile：说明变量在程序执行中可被隐含地改变 
do ：循环语句的循环体 
while ：循环语句的循环条件 
static ：声明静态变量 
if:条件语句 


	开发流程：  编写--》编译---》链接生成可执行文件；
	预处理指令以#开头；
标准输入输出
	printf	包含 stdio.h;
	%d 为占位符，有多少个占位符，就必须有多少个变量，依次替换占位符的位置；
	\n 换行
	\r 回车 后面的字符出现在本行最左边；
	\t	制表符	后面字符出现在下一段开头；
	\\  \'   \"    转意，输出\后面的  \ ' "
	%d	int;
	%hd	short;
	%hu	unsighed short;
	%ld 	long;
	%u	unsigned int;
	%f	float
	%g	float 或double  加上后面的0000
	%lf	double
	%nd	占n个位的整形；int ;
	%-nd	占n个，数字居左；
	%0nd	前面补0,占n位 int;;
	%n.mf	共占n位，其中m位小数；
	%p	指针；
	%x	十六进制，%x 小写%X 大写；






数据类型：
	char 	(unsigned char) 1 byte
	shore	(unsigned short)	2bytes
	long	unsigned long 	4bytes
	int 	4	bytes
	float	4	bytes
	double	8	bytes
	布尔类型	TRUE   1     FALSE 0 一般0为假，非0全为真；
	sizeof() 关键字可返回（）内数字的字节数；
	一般计算机中，有符号类型的数，最前一位决定符号，0表示正，1表示负；
	

运算符
	+ - × /  如果参与运算的都是整数，则结果只保留整数部分；
	%	取余数
	，	逗号运算符，把前后两个数字的内容合并为一个数；逗号运算符优先级很低；
	++   --  单目运算，可以前操作或后操作；
	> < >=		<=	==    比较运算符；
	&&   ||  ～  与 或 非 逻辑运算；
位运算符：  &     |  ～    ^   与或非  按位异或；
	>>   向右移动；
	<<  向左移动；
	向左移，填充0；
	向右移，如是无符号数则补 0； 有符号的则全部填充符号位的数值；
	左移，相当于乘以2的N次方，  右移则相当于除以2的N次方；

取地址操作符：&
	与变量存储区配合使用，可以用%p打印地址；32位系统，地址都是32位；
	*	根据地址找到数据的运算；必须放在地址前；
三目运算：
	布尔表达式 ?  公式1  ： 公式2 
	如果真，则值为公式1结果，否则值为公式2 的结果；
类型转换：
	多数据参与运算，自动转换为精度高的数据类型，隐式转换；
	强制转换 系统重新分配存储区，然后把内容COPY过去；不改变原有值；
	

控制语句：
	if  else
	for()  {}
	continue; 语句直接到循环大括号的末尾，中间所有语句这一次都不执行；;	
	break;则结束循环，直接跳出；打断循环；
	while() {}
	do {} while();




随机函数：
	srand() 设置随机种子，一般用时间种子   srand(time(0)); time.h
	rand()生成随机数； stdlib.h
	rand()%N   取余数，可以生成不大于N的随机数；

数组：
	数组名称代表第一个存储区的地址；
	数组名不能被赋值；
	数组名+n 	可以得到下标为n的元素地址；
	sizeof(数组名)	得到结果是整个数组长度；
	如果声明时确定数组长度，即是变长数组，但变长数组长度不可以初始化，也不可以在运行过程 中改变长度，只是在程序开始时明确数组长度；



函数：
	每个函数都可以声明自己的变量；局部变量，生存期是函数；
	如无返回值，声明为void 类型；;	
	exit() 结束整个程序；
	return 返回值；

变量生存期
	全局变量	整个程序执行时间，如没有初始化，自动初始化为0;
	局部变量	整个函数执行时间，作用域是函数所有语句；
	块变量		声明在一个{}内的，仅在{}内有用；

程序内存中分段保存：
	代码段		保存汇编后生成的代码；	
	全局段		记录全局存储变量；
	栈		记录全局变量；
			记录函数参数等；
	堆		包含动态分配存储区；
			用于存储中间数据；;

声明变量关键字：
	auto	自动变量，所有局部变量都是自动变量；
	static	静态变量，所有变量都可以声明为静态变量；
			静态变量生存周期是整个程序期，作用域和非静态变量一样；
	const 声明不可以被赋值的变量；
	volatitle	声明多变的变量；、

指针：
	不同类型变量记录在不同类型的指针变量；
	只有捆绑过的指针才能使用；
	NULL空指针，数值为0;
	没有初始化，未指向的指针，不得使用，（野指针）
	所有指针变量的大小都是4字节；
	可以对指针进行强制转换，
	void * 可以转换为其他类型；;
	指针+n   代表增加了n个捆绑存储区的大小；
	
	const int *p=NULL;;
	const  在整个变量前，则变量值不能改变，不能对指针捆绑区进行赋值	，但可以对指针赋值；
	int * const p=&num;
	const在指针变量前，则可以对指针捆绑区的内容进行赋值；不可以对指针赋值；
	如果传入函数的指针参数所捆绑的内容不会在函数中改变，则应加上const ;;
	无类型参数通常作为函数参数使用；
	注意不能把局部变量的地赋值给指针，做为返回值使用；

指针与数组区别：
	数组名不能被赋值；
	sizeof指针，得到的是指针本身存储区空间大小；
	sizwof 数组， 得到的是数组整个的长度；
	数组做为函数参数，其实是一个指针；
	使用指针做函数参数，可以让函数使用其它函数的存储区；


字符串：
	字符串结束 \0   对应ASCII的  0；
	所有字符串都 可以用char * 指针类型表示；
	编译器会把字符串最后自动加上结束符\0;并把字符串的值，变成第一个字符的存储地址；
	char * str1="1234"; 常用于声明字符串变量 ；
	不可以用操作符对字符串进行操作，必须使用函数：
	strlen	求长度；
	strcat  合并字符串；
	strcmp	比较   1是前面大，-1是后面大，0是一样；
	strcpy	复制；
	fgets	可以从键盘得到字符串，第三个函数是stdin则表示键盘（标准输入）




二级指针	
	二维数组记录多个字符串，容易造成内在浪费；
	可以用字符指针数组记录多个字符串，每个数组元素是一个指针如
	char * strs[2]={"abc","dddd"};
	二级指针用来记录指针的地址；
	可以记录6个内容：
	1.二级指针名可以代表自己的存储区；
	2.前面加一个*可以表示它捆绑的一级指针   内部存放的地址；
	3**p  可以表示一级指针捆绑的变量的内容；
	可以把指针数组名  赋值给二级指针；

文件操作：
	打开fopen
	操作 fread  fwrite
	关闭	fclose
	fopen 2个参数  参数一代表文件路径  参数二代表文件打开方式；
		打开方式  r 只读，并且只能从文件头开始查看；
				r+	多了修改功能；
			w 只能从文件头开始修改；;	
		w+ 比w多了查看功能；
		a 追加，只能修改文件内容，并且新内容要在原内容后面，如文件不存在则创建
	a+	比a多了查看功能；
	b 以二进制方式打开，可以与上面参数混合使用；;
	fopen  返回文件指针	失败则返回NULL
	fclose 需文件指针为参数，关闭后必须使文件指针=NLLL;
	
	文件操作分2种，把内存内容copy到文件中，即write;;
		把文件内容读入到内存，即read;;
	fread fwrite需四个参数
	参数一   内存第一个字节地址；
	参数二 	  内存中单个存储区包含的字节个数
	参数三   希望copy的存储区个数；
	参数四  文件指针；
	返回值表示实际拷贝区的存储区个数；

	系统为每个文件设置了一个整数，保存文件位置，叫位置指针；
	ftell获取当前位置指针值；
	rewind 设置位置指针到文件头;
	fseek 可以调整指针到文件任何位置；宏定了三个基准：
		SEEK_SET 0 文件头；
		SEEK_CUR 1 当前位置；
		SEEK_END 2 文件尾；
	如在基准位置前，用负数，
		基准后，用正数，距离以字节为单位；


预处理：
	#define


