最常用：
git@github.com:wzp1216/python_study.git


git clone www...
git add . 
git commit -m "***"
git pull //down and merge
git push


本地库改动，提交到远程库：
git push origin master
或git pull


1.安装GIT
2.SSH－KEY 生成并配置
3配置用户名与邮箱
ssh-keygen -t rsa -C "youremail@example.com"

git config --global user.name "your-user-name"
git config --global user.emali "your-email"
配置GIT用户信息，否则不能推拉；

git init   //init the git dir

git add filename  //add to cache

git commit -m "note"   //commit to lib

git diff    //diff the master and the local

git status  //return status

git push origin master -u //push new 
git remote -v //look remoter lib

git clone www....  //download code
git push -u origin master //frist upload
关联远程与本地库： git remote add origin www.wzp...

Git常用命令总结
git init
     在本地新建一个repo,进入一个项目目录,执行git init,会初始化一个repo,并在当前文件夹下创建一个.git文件夹.
 
git clone
     获取一个url对应的远程Git repo, 创建一个local copy.
     一般的格式是git clone [url].
     clone下来的repo会以url最后一个斜线后面的名称命名,创建一个文件夹,如果想要指定特定的名称,可以git clone [url] newname指定.
 
git status
     查询repo的状态.
     git status -s: -s表示short, -s的输出标记会有两列,第一列是对staging区域而言,第二列是对working目录而言.
 
git log
     show commit history of a branch.
     git log --oneline --number: 每条log只显示一行,显示number条.
     git log --oneline --graph:可以图形化地表示出分支合并历史.
     git log branchname可以显示特定分支的log.
     git log --oneline branch1 ^branch2,可以查看在分支1,却不在分支2中的提交.^表示排除这个分支(Window下可能要给^branch2加上引号).
     git log --decorate会显示出tag信息.
     git log --author=[author name] 可以指定作者的提交历史.
     git log --since --before --until --after 根据提交时间筛选log.
     --no-merges可以将merge的commits排除在外.
     git log --grep 根据commit信息过滤log: git log --grep=keywords
     默认情况下, git log --grep --author是OR的关系,即满足一条即被返回,如果你想让它们是AND的关系,可以加上--all-match的option.
     git log -S: filter by introduced diff.
     比如: git log -SmethodName (注意S和后面的词之间没有等号分隔).
     git log -p: show patch introduced at each commit.
     每一个提交都是一个快照(snapshot),Git会把每次提交的diff计算出来,作为一个patch显示给你看.
     另一种方法是git show [SHA].
     git log --stat: show diffstat of changes introduced at each commit.
     同样是用来看改动的相对信息的,--stat比-p的输出更简单一些.
    
git add
     在提交之前,Git有一个暂存区(staging area),可以放入新添加的文件或者加入新的改动. commit时提交的改动是上一次加入到staging area中的改动,而不是我们disk上的改动.
     git add .
     会递归地添加当前工作目录中的所有文件.
 
git diff
     不加参数的git diff:
     show diff of unstaged changes.
     此命令比较的是工作目录中当前文件和暂存区域快照之间的差异,也就是修改之后还没有暂存起来的变化内容.
 
     若要看已经暂存起来的文件和上次提交时的快照之间的差异,可以用:
     git diff --cached 命令.
     show diff of staged changes.
     (Git 1.6.1 及更高版本还允许使用 git diff --staged，效果是相同的).
 
     git diff HEAD
     show diff of all staged or unstated changes.
     也即比较woking directory和上次提交之间所有的改动.
 
     如果想看自从某个版本之后都改动了什么,可以用:
     git diff [version tag]
     跟log命令一样,diff也可以加上--stat参数来简化输出.
 
     git diff [branchA] [branchB]可以用来比较两个分支.
     它实际上会返回一个由A到B的patch,不是我们想要的结果.
     一般我们想要的结果是两个分支分开以后各自的改动都是什么,是由命令:
     git diff [branchA]…[branchB]给出的.
     实际上它是:git diff $(git merge-base [branchA] [branchB]) [branchB]的结果.
 
 
git commit
     提交已经被add进来的改动.
     git commit -m “the commit message"
     git commit -a 会先把所有已经track的文件的改动add进来,然后提交(有点像svn的一次提交,不用先暂存). 对于没有track的文件,还是需要git add一下.
     git commit --amend 增补提交. 会使用与当前提交节点相同的父节点进行一次新的提交,旧的提交将会被取消.
 
git reset
     undo changes and commits.
     这里的HEAD关键字指的是当前分支最末梢最新的一个提交.也就是版本库中该分支上的最新版本.
     git reset HEAD: unstage files from index and reset pointer to HEAD
     这个命令用来把不小心add进去的文件从staged状态取出来,可以单独针对某一个文件操作: git reset HEAD - - filename, 这个- - 也可以不加.
     git reset --soft
     move HEAD to specific commit reference, index and staging are untouched.
     git reset --hard
     unstage files AND undo any changes in the working directory since last commit.
     使用git reset —hard HEAD进行reset,即上次提交之后,所有staged的改动和工作目录的改动都会消失,还原到上次提交的状态.
     这里的HEAD可以被写成任何一次提交的SHA-1.
     不带soft和hard参数的git reset,实际上带的是默认参数mixed.
 
     总结:
     git reset --mixed id,是将git的HEAD变了(也就是提交记录变了),但文件并没有改变，(也就是working tree并没有改变). 取消了commit和add的内容.
     git reset --soft id. 实际上，是git reset –mixed id 后,又做了一次git add.即取消了commit的内容.
     git reset --hard id.是将git的HEAD变了,文件也变了.
     按改动范围排序如下:
     soft (commit) < mixed (commit + add) < hard (commit + add + local working)
 
git revert
     反转撤销提交.只要把出错的提交(commit)的名字(reference)作为参数传给命令就可以了.
     git revert HEAD: 撤销最近的一个提交.
     git revert会创建一个反向的新提交,可以通过参数-n来告诉Git先不要提交.
    
git rm
     git rm file: 从staging区移除文件,同时也移除出工作目录.
     git rm --cached: 从staging区移除文件,但留在工作目录中.
     git rm --cached从功能上等同于git reset HEAD,清除了缓存区,但不动工作目录树.
 
git clean
     git clean是从工作目录中移除没有track的文件.
     通常的参数是git clean -df:
     -d表示同时移除目录,-f表示force,因为在git的配置文件中, clean.requireForce=true,如果不加-f,clean将会拒绝执行.
 
git mv
     git rm - - cached orig; mv orig new; git add new
 
git stash
     把当前的改动压入一个栈.
     git stash将会把当前目录和index中的所有改动(但不包括未track的文件)压入一个栈,然后留给你一个clean的工作状态,即处于上一次最新提交处.
     git stash list会显示这个栈的list.
     git stash apply:取出stash中的上一个项目(stash@{0}),并且应用于当前的工作目录.
     也可以指定别的项目,比如git stash apply stash@{1}.
     如果你在应用stash中项目的同时想要删除它,可以用git stash pop
 
     删除stash中的项目:
     git stash drop: 删除上一个,也可指定参数删除指定的一个项目.
     git stash clear: 删除所有项目.
 
git branch
     git branch可以用来列出分支,创建分支和删除分支.
     git branch -v可以看见每一个分支的最后一次提交.
     git branch: 列出本地所有分支,当前分支会被星号标示出.
     git branch (branchname): 创建一个新的分支(当你用这种方式创建分支的时候,分支是基于你的上一次提交建立的). 
     git branch -d (branchname): 删除一个分支.
     删除remote的分支:
     git push (remote-name) :(branch-name): delete a remote branch.
     这个是因为完整的命令形式是:
     git push remote-name local-branch:remote-branch
     而这里local-branch的部分为空,就意味着删除了remote-branch
 
git checkout
　　git checkout (branchname)
 

 
 切换到一个分支.
     git checkout -b (branchname): 创建并切换到新的分支.
     这个命令是将git branch newbranch和git checkout newbranch合在一起的结果.
     checkout还有另一个作用:替换本地改动:
     git checkout --<filename>
     此命令会使用HEAD中的最新内容替换掉你的工作目录中的文件.已添加到暂存区的改动以及新文件都不会受到影响.
     注意:git checkout filename会删除该文件中所有没有暂存和提交的改动,这个操作是不可逆的.
 
git merge
     把一个分支merge进当前的分支.
     git merge [alias]/[branch]
     把远程分支merge到当前分支.
 
     如果出现冲突,需要手动修改,可以用git mergetool.
     解决冲突的时候可以用到git diff,解决完之后用git add添加,即表示冲突已经被resolved.
 
git tag
     tag a point in history as import.
     会在一个提交上建立永久性的书签,通常是发布一个release版本或者ship了什么东西之后加tag.
     比如: git tag v1.0
     git tag -a v1.0, -a参数会允许你添加一些信息,即make an annotated tag.
     当你运行git tag -a命令的时候,Git会打开一个编辑器让你输入tag信息.
     
     我们可以利用commit SHA来给一个过去的提交打tag:
     git tag -a v0.9 XXXX
 
     push的时候是不包含tag的,如果想包含,可以在push时加上--tags参数.
     fetch的时候,branch HEAD可以reach的tags是自动被fetch下来的, tags that aren’t reachable from branch heads will be skipped.如果想确保所有的tags都被包含进来,需要加上--tags选项.
 
git remote
     list, add and delete remote repository aliases.
     因为不需要每次都用完整的url,所以Git为每一个remote repo的url都建立一个别名,然后用git remote来管理这个list.
     git remote: 列出remote aliases.
     如果你clone一个project,Git会自动将原来的url添加进来,别名就叫做:origin.
     git remote -v:可以看见每一个别名对应的实际url.
     git remote add [alias] [url]: 添加一个新的remote repo.
     git remote rm [alias]: 删除一个存在的remote alias.
     git remote rename [old-alias] [new-alias]: 重命名.
     git remote set-url [alias] [url]:更新url. 可以加上—push和fetch参数,为同一个别名set不同的存取地址.
 
git fetch
     download new branches and data from a remote repository.
     可以git fetch [alias]取某一个远程repo,也可以git fetch --all取到全部repo
     fetch将会取到所有你本地没有的数据,所有取下来的分支可以被叫做remote branches,它们和本地分支一样(可以看diff,log等,也可以merge到其他分支),但是Git不允许你checkout到它们. 
 
git pull
     fetch from a remote repo and try to merge into the current branch.
     pull == fetch + merge FETCH_HEAD
     git pull会首先执行git fetch,然后执行git merge,把取来的分支的head merge到当前分支.这个merge操作会产生一个新的commit.    
     如果使用--rebase参数,它会执行git rebase来取代原来的git merge.
  
 
git rebase
     --rebase不会产生合并的提交,它会将本地的所有提交临时保存为补丁(patch),放在”.git/rebase”目录中,然后将当前分支更新到最新的分支尖端,最后把保存的补丁应用到分支上.
     rebase的过程中,也许会出现冲突,Git会停止rebase并让你解决冲突,在解决完冲突之后,用git add去更新这些内容,然后无需执行commit,只需要:
     git rebase --continue就会继续打余下的补丁.
     git rebase --abort将会终止rebase,当前分支将会回到rebase之前的状态.
 
git push
     push your new branches and data to a remote repository.
     git push [alias] [branch]
     将会把当前分支merge到alias上的[branch]分支.如果分支已经存在,将会更新,如果不存在,将会添加这个分支.
     如果有多个人向同一个remote repo push代码, Git会首先在你试图push的分支上运行git log,检查它的历史中是否能看到server上的branch现在的tip,如果本地历史中不能看到server的tip,说明本地的代码不是最新的,Git会拒绝你的push,让你先fetch,merge,之后再push,这样就保证了所有人的改动都会被考虑进来.
 
git reflog
     git reflog是对reflog进行管理的命令,reflog是git用来记录引用变化的一种机制,比如记录分支的变化或者是HEAD引用的变化.
     当git reflog不指定引用的时候,默认列出HEAD的reflog.
     HEAD@{0}代表HEAD当前的值,HEAD@{3}代表HEAD在3次变化之前的值.
     git会将变化记录到HEAD对应的reflog文件中,其路径为.git/logs/HEAD, 分支的reflog文件都放在.git/logs/refs目录下的子目录中.
 
 
特殊符号:
     ^代表父提交,当一个提交有多个父提交时,可以通过在^后面跟上一个数字,表示第几个父提交: ^相当于^1.
     ~<n>相当于连续的<n>个^.






分支管理:
1.新建版本库，添加文件 ：
git init
git add .

2.提交本地仓库
git commit -a -m 'add some file'

1
新建分支
git checkout -b xxx(分支名)
这句指令的意思是新建分支并切换到新建的分支上。
也可以分段使用指令：
git branch xxx(分支名)      新建分支
git checkout xxx(分支名)  切换分支
因为大多数情况下，我们新建分支是为了切换到那个分支上进行开发。

2
查看分支
git branch
输入指令后会发现，你所在操作的分支前有一个'*'。

3
修改分支名
git branch -m xxx(原名)  xxx(修改名)
有时候在做开发的时候，发现分支名字取得不太合理，重新新建一个分支没多大必要，所以会考虑换一个分支名。

4
推送远程服务器
git push origin xxx(待提交的分支名)
提交服务器的前提是，本地必须有自己的分支，才能提交。只有第一次提交要加 '-u' 参数，之后提交并不用加这个参数。

5
查看所有分支
git branch –a    查看全部分支（远程、本地）
git branch –r     查看远程分支
git branch –l     查看本地分支
可以看的出来输入 ：
git branch
默认是查看本地分支。

6
分支的合并
git merge xxx(要合并的分支)
讲解原理的时候，说过，最终版本一定是master分支上所以要进行分支的合并。要合并分支前，必须先用指令：
git chechout master
回到master分支，然后在进行合并。
上面介绍原理的时候说过，实际上修改master指针为brh 分支的指针信息。所以此时的合并方式为“Fast-forword”，表示是快速合并方式，快速的合并方式并不会产生任何的commit id.他只是利用了合并子分支的commit id 继续操作。后面在讲解“no fast-forword”方法和这种方式的区别。

7
删除分支（本地）
git branch -d xxx(待删除的分支)
强制删除分支：
git branch -D xxx(待删除的分支)
我们合并完分支后，这个分支其实已经没有什么用，我们这会儿就可以删除。
如果有一种情况，当我们在在分支开发着正开心，但是发现这个分支开发的功能并没有什么软用，我们最想做的是删除这个分支，并返回上最开始的地址。这个时候如果在分支上提交过，一般情况下用普通的删除是无法操作的，要用'-D'参数，代表强制删除。

8
删除分支（远程）
git push origin --delete xxx(远程分支名)
本地分支删除完，也要删除远程分支，表示同步。
我们也可以登陆git上查看分支是否被删除。

9
冲突自动解决
分支可以很好的实现多人开发的互操作，但是有可能出现这样的情况：
(1)现在建立了一个新的分支brh，并且有一位开发者再次分支上修改了Demo.c文件。
(2)但是这个开发者由于不小心的失误，又将分支切换回master分支上，并且在master分支上也对文件修改。
现在等于有两个分支对同一个文件进行了修改，那么在进行提交的时候一定会出现一个冲突。因为系统不知道现在应该提交那一份分支的文件。
解决冲突
我们可以做一个实验：
(1)创建一个分支，并修改分支某一个文件内容
git checkout -b brh
(2)提交内容
git commit -a -m 'modified some file'
(3)切换回master分支
git checkout master
(4)修改同一个文件内容,并提交修改
git commit -a -m 'master brach change'
现在是在两个分支上都进行了修改，而且修改同一个文件(简单的添加或者删除)，显然现在合并是无法合并的。
(5)合并分支
git merge brh
这个时候的冲突的是git自动给你解决的，其实它解决只能是简单的合并删除，有很大的局限性。正式写代码的时候，我们是会在代码内部修修改改，并不会只是添加和删除文件，这时候，git就无能为力了。只能手动解决冲突，就是我们下面要讲解的内容。

10
冲突手动解决
以上的由于代码修改的比较有规律，程序并没有发现不能够操作的冲突，那么下面进行一个更加严格冲突产生代码。

(1) 先把brh分支删除

git branch -D brh

(2)创建并切换一个新的分支

git checkout -b brh

(3)修改文件，随意修改，并提交

git commit -a -m 'modified young.c file'

(4)切换为master分支

git checkout master

(5) 在master分支上任意修改文件，并提交

git commit -a -m 'master：modified some file'

(6)合并分支

git merge brh

这时候，我们会发现 直接冲突了，这时候，需要我们手动修改冲突。

(7)查看冲突状态

git status

我们点开"young.c"这个文件，会发现这个文件冲突的地方，git已经给你标记出来了，告诉你哪里是你修改过的，我们只需要把不需要的删除(包括标记符)即可。

(8)删除标记和手动修改文件，并提交

(9)提交服务器

git push origin master

(10) 查看历史分支合并情况

git log --graph -pretty=oneline


这个指令的意思是说，用绘图的形式，一行打印log数据。所以我们能在左侧看到完整的分支。

(11) 删除分支
git branch -d brh

11
分支管理
在之前进行的分支合并时候全部使用的是“fast forward”方式完成的，而这种方式只是改变了master指针，没有commit id。可是在分支合并的时候也可以不用这种方式快速合并，即：增加一个“—no-ff”参数，这表示合并之后会自动生成新的commit id ，从而保证了合并数据的完整性，因为有commit id 就有了阶段性的数据。
“—no-ff 进行合并”

12
分支暂存
现在有一个场景，你正在一个分支上进行代码的开发，但是突然你的领导给你一个新的任务，并且要求半小时内完成，怎么办？
难道那开发一半的分支要提交吗？不可能的，因为对于版本控制的基本道德方式：不能把所有有问题的代码提交上去，你所提交的代码一定是正确的，那么为了这样的一个问题，git中提供了一个分支的暂存机制，可以将开发一半的分支进行保持，而后在适当的时候进行代码恢复。


这篇文章有点长，先写这么多吧。剩下的一部分：git的补丁和如何进行多人协同开发部分，就放到下一篇文章来说明吧。

学习本来就不是一个容易的事儿，慢慢来，一切都还来得及。

总结

在整个git中，分支的管理是最麻烦但是这个是最重要的操作，所以这部分可以反复查看，分支是进行开发使用的，最终必须都在master上，这点最重要，切记。

-END-
